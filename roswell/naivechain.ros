#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload
               '(:ironclad :swank-client :hunchentoot :cl-naivechain)
               :silent t))

(defpackage :ros.script.cl-naivechain.3787889801
  (:use :cl))
(in-package :ros.script.cl-naivechain.3787889801)

(defparameter *api-port* 3001)
(defparameter *p2p-port* 6001)
(defparameter *p2p-address* "127.0.0.1")

(defun print-usage-and-quit ()
  (format t "~%Usage:~%  ros exec naivechain [--api-port port] [--p2p-port port] [--p2p-address address]~%")
  (ros:quit))

(defun string-getf (plist key)
  (loop for k in plist by #'cddr
        for v in (rest plist) by #'cddr
        when (string= k key)
        return v))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let ((api-port-string (string-getf argv "--api"))
        (p2p-port-string (string-getf argv "--p2p"))
        (p2p-address (string-getf argv "--address")))

    (when api-port-string
      (multiple-value-bind
        (api-port terminated-at) (parse-integer api-port-string :junk-allowed t)
        (if (< terminated-at (length api-port-string))
          (progn (format t "Invalid API port: ~A~%" api-port-string)
                 (print-usage-and-quit))
          (setf *api-port* api-port))))

    (when p2p-port-string
      (multiple-value-bind
        (p2p-port terminated-at) (parse-integer p2p-port-string :junk-allowed t)
        (if (< terminated-at (length p2p-port-string))
          (progn (format t "Invalid P2P port: ~A~%" p2p-port-string)
                 (print-usage-and-quit))
          (setf *p2p-port* p2p-port))))

    (when p2p-address
      (setf *p2p-address* p2p-address))

    (naivechain:start-api-server *api-port*)
    (naivechain:start-p2p-server *p2p-port* *p2p-address*)
    (format t "~%A naivechain peer started.~% - API port   : ~A~% - P2P port   : ~A~% - P2P address: ~A~%~%" *api-port* *p2p-port* *p2p-address*)
    (loop (sleep 1))))
;;; vim: set ft=lisp lisp:
